[workspace]
members  = ["./crates/*", "xtask"]
resolver = "2"

[workspace.package]
authors     = ["Pablo Hernandez <hadronomy@gmail.com> (https://hadronomy.com/)"]
description = "Language tools for the `ram` language"
edition     = "2024"
license     = "MIT"
publish     = false
repository  = "https://github.com/hadronomy/ram"
version     = "0.1.0-alpha.14"

[workspace.dependencies]
anstream           = "0.6.18"
anyhow             = "1.0.98"
base64             = "0.22.1"
chumsky            = "0.10.1"
clap               = { version = "4.5.37", features = ["derive", "env", "string", "wrap_help"] }
cstree             = { version = "0.12.2", features = ["derive", "serde"] }
dashmap            = "6.1.0"
drop_bomb          = "0.1.5"
flate2             = "1.1.1"
globset            = { version = "0.4.16", features = ["serde"] }
human-panic        = "2.0.2"
indexmap           = "2.9.0"
itertools          = "0.14.0"
la-arena           = "0.3.1"
miette             = "7.6.0"
num-derive         = "0.4.2"
num-traits         = "0.2.19"
open               = "5.3.2"
owo-colors         = "4.2.0"
petgraph           = "0.8.1"
rowan              = "0.16.1"
rustc-hash         = "2.1.1"
salsa              = "0.21.1"
semver             = "1.0.26"
shadow-rs          = "1.1.1"
syntect            = { version = "5.2.0", features = ["default-fancy"] }
tempfile           = "3.19.1"
textwrap           = "0.16.2"
thiserror          = "2.0.12"
tokio              = "1.44.2"
tokio-util         = { version = "0.7.15", features = ["codec", "compat"] }
tracing            = "0.1.41"
tracing-subscriber = { version = "0.3.19", features = ["env-filter"] }
triomphe           = "0.1.14"
typed-arena        = "2.0.2"
walkdir            = "2.5.0"

# Serde and serialization
serde        = "1.0.219"
serde_derive = "1.0.219"
serde_json   = "1.0.140"
taplo        = "0.13.2"
toml         = "0.8.22"

# Tower crates
tower            = { version = "0.5.2" }
tower-lsp        = { version = "0.20.0" }
tower-lsp-macros = "0.9.0"

# Macros
proc-macro2 = "1.0.95"
quote       = "1.0.40"
syn         = { version = "2.0.101", features = ["full"] }

# Dev
proptest = "1.6.0"

# Workspace crates
base_db             = { path = "crates/base_db" }
hir                 = { path = "crates/hir" }
hir_analysis        = { path = "crates/hir_analysis" }
hir_analysis_derive = { path = "crates/hir_analysis_derive" }
hir_def             = { path = "crates/hir_def" }
ram_core            = { path = "crates/ram_core" }
ram_derive          = { path = "crates/ram_derive" }
ram_diagnostics     = { path = "crates/ram_diagnostics" }
ram_error           = { path = "crates/ram_error" }
ram_lsp             = { path = "crates/ram_lsp" }
ram_parser          = { path = "crates/ram_parser" }
ram_syntax          = { path = "crates/ram_syntax" }
ram_vm              = { path = "crates/ram_vm" }

# Lint rules that I like taken from
# https://github.com/rolldown/rolldown/blob/main/Cargo.toml
[workspace.lints.clippy]
# Guidelines
# - We should only disable rules globally if they are either false positives, chaotic, or does not make sense.
# - Group are enabled with priority -1, so we could easily override some specific rules.
#   - https://doc.rust-lang.org/stable/cargo/reference/manifest.html#the-lints-section

# --- restriction https://doc.rust-lang.org/clippy/usage.html#clippyrestriction
dbg_macro    = "deny"
print_stdout = "deny"

# I like the explicitness of this rule as it removes confusion around `clone`.
# This increases readability, avoids `clone` mindlessly and heap allocating on accident.
clone_on_ref_ptr                = "deny"
empty_drop                      = "deny"
exit                            = "deny"
filetype_is_file                = "deny"
get_unwrap                      = "deny"
rc_buffer                       = "deny"
rc_mutex                        = "deny"
rest_pat_in_fully_bound_structs = "deny"
unnecessary_safety_comment      = "deny"

# --- pedantic #https://doc.rust-lang.org/clippy/usage.html#clippypedantic
# To write the best rust code, pedantic group is enabled by default.
pedantic = { level = "deny", priority = -1 }

# Wizards, naming is too hard.
module_inception        = "allow"
module_name_repetitions = "allow"
similar_names           = "allow"

# Forwarding `Result` is a common pattern, this rule is too pedantic.
missing_errors_doc = "allow"

# #[must_use] is creating too much noise for this codebase, it does not add much value except nagging
# the programmer to add a #[must_use] after clippy has been run.
# Having #[must_use] everywhere also hinders readability.
must_use_candidate = "allow"

doc_markdown         = "allow"
missing_const_for_fn = "allow"
needless_for_each    = "allow"
new_without_default  = "allow"
# TODO: should review this rule.
missing_panics_doc = "allow"

# Order doesn't really matter https://rust-lang.github.io/rust-clippy/master/index.html#/inconsistent_struct_constructor
inconsistent_struct_constructor = "allow"

# Single match is equally readable as if/else. https://rust-lang.github.io/rust-clippy/master/index.html#/single_match
single_match      = "allow"
single_match_else = "allow"

[profile.release]
codegen-units = 1
incremental   = true
lto           = true
opt-level     = 3    # Optimize for speed

[profile.bench]
debug = true

# The profile that 'dist' will build with
[profile.dist]
inherits = "release"
lto      = "thin"
