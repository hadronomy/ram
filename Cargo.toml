[workspace]
members  = ["./crates/*", "crates/ram-error", "crates/ram-parser"]
resolver = "2"

[workspace.package]
authors    = ["Pablo Hernandez <hadronomy@gmail.com> (https://hadronomy.com/)"]
edition    = "2024"
license    = "MIT"
repository = "https://github.com/hadronomy/ram"
version    = "0.1.0"

[workspace.dependencies]
anstream              = "0.6.18"
anyhow                = "1.0.95"
async-tungstenite     = { version = "0.28", features = ["tokio-runtime"] }
chumsky               = "0.9.3"
clap                  = { version = "4.5.23", features = ["derive", "env", "string", "wrap_help"] }
globset               = { version = "0.4.15", features = ["serde"] }
human-panic           = "2.0.2"
itertools             = "0.14.0"
miette                = "7.4.0"
num-derive            = "0.4.2"
num-traits            = "0.2.19"
owo-colors            = "4.1.0"
salsa                 = "0.18.0"
semver                = "1.0.24"
serde                 = "1.0.217"
serde_derive          = "1.0.217"
serde_json            = "1.0.134"
syntect               = { version = "5.2.0", features = ["default-fancy"] }
tempfile              = "3.15.0"
textwrap              = "0.16.1"
thiserror             = "2.0.9"
tokio                 = "1.42.0"
tokio-util            = { version = "0.7.13", features = ["codec", "compat"] }
tower                 = { version = "0.5.2" }
tower-lsp             = { version = "0.20.0" }
tower-lsp-macros      = "0.9.0"
tracing               = "0.1.41"
tracing-subscriber    = { version = "0.3.19", features = ["env-filter"] }
walkdir               = "2.5.0"

ram-error  = { path = "crates/ram-error" }
ram-parser = { path = "crates/ram-parser" }

# Lint rules that I like taken from
# https://github.com/rolldown/rolldown/blob/main/Cargo.toml
[workspace.lints.clippy]
# Guidelines
# - We should only disable rules globally if they are either false positives, chaotic, or does not make sense.
# - Group are enabled with priority -1, so we could easily override some specific rules.
#   - https://doc.rust-lang.org/stable/cargo/reference/manifest.html#the-lints-section

# --- restriction https://doc.rust-lang.org/clippy/usage.html#clippyrestriction
dbg_macro    = "deny"
print_stdout = "deny"

# I like the explicitness of this rule as it removes confusion around `clone`.
# This increases readability, avoids `clone` mindlessly and heap allocating on accident.
clone_on_ref_ptr                = "deny"
empty_drop                      = "deny"
exit                            = "deny"
filetype_is_file                = "deny"
get_unwrap                      = "deny"
rc_buffer                       = "deny"
rc_mutex                        = "deny"
rest_pat_in_fully_bound_structs = "deny"
unnecessary_safety_comment      = "deny"

# --- pedantic #https://doc.rust-lang.org/clippy/usage.html#clippypedantic
# To write the best rust code, pedantic group is enabled by default.
pedantic = { level = "deny", priority = -1 }

# Wizards, naming is too hard.
module_inception        = "allow"
module_name_repetitions = "allow"
similar_names           = "allow"

# Forwarding `Result` is a common pattern, this rule is too pedantic.
missing_errors_doc = "allow"

# #[must_use] is creating too much noise for this codebase, it does not add much value except nagging
# the programmer to add a #[must_use] after clippy has been run.
# Having #[must_use] everywhere also hinders readability.
must_use_candidate = "allow"

doc_markdown         = "allow"
missing_const_for_fn = "allow"
needless_for_each    = "allow"
new_without_default  = "allow"
# TODO: should review this rule.
missing_panics_doc = "allow"

# Order doesn't really matter https://rust-lang.github.io/rust-clippy/master/index.html#/inconsistent_struct_constructor
inconsistent_struct_constructor = "allow"

# Single match is equally readable as if/else. https://rust-lang.github.io/rust-clippy/master/index.html#/single_match
single_match      = "allow"
single_match_else = "allow"

[profile.release]
codegen-units = 1
incremental   = true
lto           = true
opt-level     = 3    # Optimize for speed
