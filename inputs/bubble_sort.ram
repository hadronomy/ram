# Bubble Sort - Initial setup
        read 0      # Read size into R0
        store 10    # Store size in R10 (permanent)
        load =0
        store 2     # Initialize array index to 0

# Read array elements
read_loop: load 10
        sub 2
        jzero end_read
        read 0      # Read next element
        store 3[2]  # Store in array
        load 2
        add =1
        store 2     # Increment index
        jump read_loop

# Initialize sorting
end_read: load 10
        sub =1
        store 1     # n-1 in R1 (outer loop counter)

outer:  load 1      # Check if outer loop done
        jzero end_outer
        load =0
        store 2     # j = 0 (inner loop counter)

inner:  load 1
        sub 2       # Check if inner loop done
        jzero next_outer
        load 3[2]   # Load current element
        store 4     # Store in R4
        load 2
        add =1
        store 5     # Index for next element
        load 3[5]   # Load next element
        sub 4       # Compare next - current
        jgtz next_inner  # If next > current, no swap needed

# Swap elements
        load 3[5]   # Load next element
        store 6     # Store temporarily
        load 4      # Load current element
        store 3[5]  # Store current in next position
        load 6      # Load saved next element
        store 3[2]  # Store in current position

next_inner:
        load 2
        add =1
        store 2     # j++
        jump inner

next_outer:
        load 1
        sub =1
        store 1     # Decrement outer loop counter
        jump outer

# Print sorted array
end_outer: load =0
        store 2     # Reset counter
print:  load 10
        sub 2
        jzero terminate
        load 3[2]
        write 0
        load 2
        add =1
        store 2
        jump print

terminate: halt
