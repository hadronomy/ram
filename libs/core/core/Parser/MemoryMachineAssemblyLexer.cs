//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/hadronomy/repos/ram/libs/core/core/Parser/MemoryMachineAssembly.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MemoryMachine.Core.Parser {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MemoryMachineAssemblyLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IDENTIFIER=1, NUMBER=2, COLON=3, EQUALS=4, ASTERISK=5, LBRACKET=6, RBRACKET=7, 
		WS=8, COMMENT=9, NEWLINE=10;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"IDENTIFIER", "NUMBER", "COLON", "EQUALS", "ASTERISK", "LBRACKET", "RBRACKET", 
		"WS", "COMMENT", "NEWLINE"
	};


	public MemoryMachineAssemblyLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MemoryMachineAssemblyLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "':'", "'='", "'*'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IDENTIFIER", "NUMBER", "COLON", "EQUALS", "ASTERISK", "LBRACKET", 
		"RBRACKET", "WS", "COMMENT", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MemoryMachineAssembly.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MemoryMachineAssemblyLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,10,59,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,5,0,24,8,0,10,0,12,0,27,9,0,1,1,4,1,30,
		8,1,11,1,12,1,31,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,
		7,1,8,1,8,5,8,50,8,8,10,8,12,8,53,9,8,1,9,4,9,56,8,9,11,9,12,9,57,0,0,
		10,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,1,0,5,2,0,65,90,97,122,
		4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,9,9,32,32,2,0,10,10,13,13,62,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,1,21,1,0,0,0,3,29,
		1,0,0,0,5,33,1,0,0,0,7,35,1,0,0,0,9,37,1,0,0,0,11,39,1,0,0,0,13,41,1,0,
		0,0,15,43,1,0,0,0,17,47,1,0,0,0,19,55,1,0,0,0,21,25,7,0,0,0,22,24,7,1,
		0,0,23,22,1,0,0,0,24,27,1,0,0,0,25,23,1,0,0,0,25,26,1,0,0,0,26,2,1,0,0,
		0,27,25,1,0,0,0,28,30,7,2,0,0,29,28,1,0,0,0,30,31,1,0,0,0,31,29,1,0,0,
		0,31,32,1,0,0,0,32,4,1,0,0,0,33,34,5,58,0,0,34,6,1,0,0,0,35,36,5,61,0,
		0,36,8,1,0,0,0,37,38,5,42,0,0,38,10,1,0,0,0,39,40,5,91,0,0,40,12,1,0,0,
		0,41,42,5,93,0,0,42,14,1,0,0,0,43,44,7,3,0,0,44,45,1,0,0,0,45,46,6,7,0,
		0,46,16,1,0,0,0,47,51,5,35,0,0,48,50,8,4,0,0,49,48,1,0,0,0,50,53,1,0,0,
		0,51,49,1,0,0,0,51,52,1,0,0,0,52,18,1,0,0,0,53,51,1,0,0,0,54,56,7,4,0,
		0,55,54,1,0,0,0,56,57,1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,58,20,1,0,0,
		0,5,0,25,31,51,57,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MemoryMachine.Core.Parser
