//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MemoryMachineAssemblyParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IDENTIFIER=1, NUMBER=2, COLON=3, EQUALS=4, ASTERISK=5, LBRACKET=6, RBRACKET=7, 
		WS=8, COMMENT=9, NEWLINE=10;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_label_definition = 2, RULE_label = 3, 
		RULE_instruction = 4, RULE_argument = 5, RULE_comment = 6, RULE_direct = 7, 
		RULE_indirect = 8, RULE_immediate = 9, RULE_accessor = 10, RULE_index = 11;
	public static readonly string[] ruleNames = {
		"program", "line", "label_definition", "label", "instruction", "argument", 
		"comment", "direct", "indirect", "immediate", "accessor", "index"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "':'", "'='", "'*'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IDENTIFIER", "NUMBER", "COLON", "EQUALS", "ASTERISK", "LBRACKET", 
		"RBRACKET", "WS", "COMMENT", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MemoryMachineAssembly.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MemoryMachineAssemblyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MemoryMachineAssemblyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MemoryMachineAssemblyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MemoryMachineAssemblyParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(MemoryMachineAssemblyParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(MemoryMachineAssemblyParser.NEWLINE, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMemoryMachineAssemblyVisitor<TResult> typedVisitor = visitor as IMemoryMachineAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			line();
			State = 33;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 26;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 25;
						Match(NEWLINE);
						}
						}
						State = 28;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NEWLINE );
					State = 30;
					line();
					}
					} 
				}
				State = 35;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 36;
				Match(NEWLINE);
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 42;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_definitionContext label_definition() {
			return GetRuleContext<Label_definitionContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMemoryMachineAssemblyVisitor<TResult> typedVisitor = visitor as IMemoryMachineAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			State = 50;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 44;
				instruction();
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 45;
					comment();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				label_definition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 49;
				comment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MemoryMachineAssemblyParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MemoryMachineAssemblyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(MemoryMachineAssemblyParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public Label_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.EnterLabel_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.ExitLabel_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMemoryMachineAssemblyVisitor<TResult> typedVisitor = visitor as IMemoryMachineAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_definitionContext label_definition() {
		Label_definitionContext _localctx = new Label_definitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_label_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			Match(IDENTIFIER);
			State = 53;
			Match(COLON);
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 54;
				Match(NEWLINE);
				}
			}

			State = 57;
			instruction();
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 58;
				comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MemoryMachineAssemblyParser.IDENTIFIER, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMemoryMachineAssemblyVisitor<TResult> typedVisitor = visitor as IMemoryMachineAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 6, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MemoryMachineAssemblyParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMemoryMachineAssemblyVisitor<TResult> typedVisitor = visitor as IMemoryMachineAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 8, RULE_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(IDENTIFIER);
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 54L) != 0)) {
				{
				State = 64;
				argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	 
		public ArgumentContext() { }
		public virtual void CopyFrom(ArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberOperandContext : ArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectContext direct() {
			return GetRuleContext<DirectContext>(0);
		}
		public NumberOperandContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.EnterNumberOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.ExitNumberOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMemoryMachineAssemblyVisitor<TResult> typedVisitor = visitor as IMemoryMachineAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOperand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndirectOperandContext : ArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndirectContext indirect() {
			return GetRuleContext<IndirectContext>(0);
		}
		public IndirectOperandContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.EnterIndirectOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.ExitIndirectOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMemoryMachineAssemblyVisitor<TResult> typedVisitor = visitor as IMemoryMachineAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndirectOperand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImmediateOperandContext : ArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImmediateContext immediate() {
			return GetRuleContext<ImmediateContext>(0);
		}
		public ImmediateOperandContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.EnterImmediateOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.ExitImmediateOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMemoryMachineAssemblyVisitor<TResult> typedVisitor = visitor as IMemoryMachineAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmediateOperand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LabelOperandContext : ArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public LabelOperandContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.EnterLabelOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.ExitLabelOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMemoryMachineAssemblyVisitor<TResult> typedVisitor = visitor as IMemoryMachineAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 10, RULE_argument);
		try {
			State = 71;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				_localctx = new NumberOperandContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 67;
				direct();
				}
				break;
			case ASTERISK:
				_localctx = new IndirectOperandContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 68;
				indirect();
				}
				break;
			case EQUALS:
				_localctx = new ImmediateOperandContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 69;
				immediate();
				}
				break;
			case IDENTIFIER:
				_localctx = new LabelOperandContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 70;
				label();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MemoryMachineAssemblyParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMemoryMachineAssemblyVisitor<TResult> typedVisitor = visitor as IMemoryMachineAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 12, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MemoryMachineAssemblyParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessorContext accessor() {
			return GetRuleContext<AccessorContext>(0);
		}
		public DirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.EnterDirect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.ExitDirect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMemoryMachineAssemblyVisitor<TResult> typedVisitor = visitor as IMemoryMachineAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectContext direct() {
		DirectContext _localctx = new DirectContext(Context, State);
		EnterRule(_localctx, 14, RULE_direct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(NUMBER);
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACKET) {
				{
				State = 76;
				accessor();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndirectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(MemoryMachineAssemblyParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MemoryMachineAssemblyParser.NUMBER, 0); }
		public IndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.EnterIndirect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.ExitIndirect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMemoryMachineAssemblyVisitor<TResult> typedVisitor = visitor as IMemoryMachineAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndirectContext indirect() {
		IndirectContext _localctx = new IndirectContext(Context, State);
		EnterRule(_localctx, 16, RULE_indirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(ASTERISK);
			State = 80;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImmediateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(MemoryMachineAssemblyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MemoryMachineAssemblyParser.NUMBER, 0); }
		public ImmediateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_immediate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.EnterImmediate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.ExitImmediate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMemoryMachineAssemblyVisitor<TResult> typedVisitor = visitor as IMemoryMachineAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmediate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImmediateContext immediate() {
		ImmediateContext _localctx = new ImmediateContext(Context, State);
		EnterRule(_localctx, 18, RULE_immediate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(EQUALS);
			State = 83;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(MemoryMachineAssemblyParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(MemoryMachineAssemblyParser.RBRACKET, 0); }
		public AccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.EnterAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.ExitAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMemoryMachineAssemblyVisitor<TResult> typedVisitor = visitor as IMemoryMachineAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorContext accessor() {
		AccessorContext _localctx = new AccessorContext(Context, State);
		EnterRule(_localctx, 20, RULE_accessor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(LBRACKET);
			State = 86;
			index();
			State = 87;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectContext direct() {
			return GetRuleContext<DirectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectContext indirect() {
			return GetRuleContext<IndirectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImmediateContext immediate() {
			return GetRuleContext<ImmediateContext>(0);
		}
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMemoryMachineAssemblyListener typedListener = listener as IMemoryMachineAssemblyListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMemoryMachineAssemblyVisitor<TResult> typedVisitor = visitor as IMemoryMachineAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 22, RULE_index);
		try {
			State = 92;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 89;
				direct();
				}
				break;
			case ASTERISK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 90;
				indirect();
				}
				break;
			case EQUALS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 91;
				immediate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,10,95,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,4,0,27,8,0,11,0,12,0,28,
		1,0,5,0,32,8,0,10,0,12,0,35,9,0,1,0,5,0,38,8,0,10,0,12,0,41,9,0,1,0,1,
		0,1,1,1,1,3,1,47,8,1,1,1,1,1,3,1,51,8,1,1,2,1,2,1,2,3,2,56,8,2,1,2,1,2,
		3,2,60,8,2,1,3,1,3,1,4,1,4,3,4,66,8,4,1,5,1,5,1,5,1,5,3,5,72,8,5,1,6,1,
		6,1,7,1,7,3,7,78,8,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,
		1,11,1,11,3,11,93,8,11,1,11,0,0,12,0,2,4,6,8,10,12,14,16,18,20,22,0,0,
		97,0,24,1,0,0,0,2,50,1,0,0,0,4,52,1,0,0,0,6,61,1,0,0,0,8,63,1,0,0,0,10,
		71,1,0,0,0,12,73,1,0,0,0,14,75,1,0,0,0,16,79,1,0,0,0,18,82,1,0,0,0,20,
		85,1,0,0,0,22,92,1,0,0,0,24,33,3,2,1,0,25,27,5,10,0,0,26,25,1,0,0,0,27,
		28,1,0,0,0,28,26,1,0,0,0,28,29,1,0,0,0,29,30,1,0,0,0,30,32,3,2,1,0,31,
		26,1,0,0,0,32,35,1,0,0,0,33,31,1,0,0,0,33,34,1,0,0,0,34,39,1,0,0,0,35,
		33,1,0,0,0,36,38,5,10,0,0,37,36,1,0,0,0,38,41,1,0,0,0,39,37,1,0,0,0,39,
		40,1,0,0,0,40,42,1,0,0,0,41,39,1,0,0,0,42,43,5,0,0,1,43,1,1,0,0,0,44,46,
		3,8,4,0,45,47,3,12,6,0,46,45,1,0,0,0,46,47,1,0,0,0,47,51,1,0,0,0,48,51,
		3,4,2,0,49,51,3,12,6,0,50,44,1,0,0,0,50,48,1,0,0,0,50,49,1,0,0,0,51,3,
		1,0,0,0,52,53,5,1,0,0,53,55,5,3,0,0,54,56,5,10,0,0,55,54,1,0,0,0,55,56,
		1,0,0,0,56,57,1,0,0,0,57,59,3,8,4,0,58,60,3,12,6,0,59,58,1,0,0,0,59,60,
		1,0,0,0,60,5,1,0,0,0,61,62,5,1,0,0,62,7,1,0,0,0,63,65,5,1,0,0,64,66,3,
		10,5,0,65,64,1,0,0,0,65,66,1,0,0,0,66,9,1,0,0,0,67,72,3,14,7,0,68,72,3,
		16,8,0,69,72,3,18,9,0,70,72,3,6,3,0,71,67,1,0,0,0,71,68,1,0,0,0,71,69,
		1,0,0,0,71,70,1,0,0,0,72,11,1,0,0,0,73,74,5,9,0,0,74,13,1,0,0,0,75,77,
		5,2,0,0,76,78,3,20,10,0,77,76,1,0,0,0,77,78,1,0,0,0,78,15,1,0,0,0,79,80,
		5,5,0,0,80,81,5,2,0,0,81,17,1,0,0,0,82,83,5,4,0,0,83,84,5,2,0,0,84,19,
		1,0,0,0,85,86,5,6,0,0,86,87,3,22,11,0,87,88,5,7,0,0,88,21,1,0,0,0,89,93,
		3,14,7,0,90,93,3,16,8,0,91,93,3,18,9,0,92,89,1,0,0,0,92,90,1,0,0,0,92,
		91,1,0,0,0,93,23,1,0,0,0,11,28,33,39,46,50,55,59,65,71,77,92
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
