name: Release Build

permissions: {}

on:
  workflow_call:
    inputs:
      version: # Should be valid semver or 'patch', 'minor', 'major', 'commit'. See scripts/misc/bump-version.js for details.
        type: string
        default: 'noop'

jobs:
  build-binding:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            build: pnpm ci:build-release-binary --target x86_64-apple-darwin

          - os: macos-latest
            target: aarch64-apple-darwin
            build: |
              export CARGO_BUILD_TARGET=aarch64-apple-darwin;
              pnpm ci:build-release-binary --target aarch64-apple-darwin

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            build: pnpm ci:build-release-binary --target x86_64-pc-windows-msvc

          - os: windows-latest
            target: i686-pc-windows-msvc
            build: |
              export CARGO_BUILD_TARGET=i686-pc-windows-msvc;
              pnpm ci:build-release-binary --target i686-pc-windows-msvc

          - os: windows-latest
            target: aarch64-pc-windows-msvc
            build: |
              export CARGO_BUILD_TARGET=aarch64-pc-windows-msvc;
              pnpm ci:build-release-binary --target aarch64-pc-windows-msvc

          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: |
              export CARGO_BUILD_TARGET=x86_64-unknown-linux-gnu;
              export CC=clang;
              pnpm ci:build-release-binary --target x86_64-unknown-linux-gnu 

          # - os: ubuntu-latest
          #   target: x86_64-unknown-linux-musl
          #   build: pnpm ci:build-release-binary --target x86_64-unknown-linux-musl

          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          #   build: |
          #     export CARGO_BUILD_TARGET=aarch64-unknown-linux-gnu;
          #     export CC=clang;
          #     pnpm ci:build-release-binary  --target aarch64-unknown-linux-gnu

          # - os: ubuntu-latest
          #   target: armv7-unknown-linux-gnueabihf
          #   build: |
          #     export CARGO_BUILD_TARGET=armv7-unknown-linux-gnueabihf;
          #     export CC=clang;
          #     pnpm ci:build-release-binary --target armv7-unknown-linux-gnueabihf

          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-musl
          #   build: |
          #     export CARGO_BUILD_TARGET=aarch64-unknown-linux-musl;
          #     pnpm ci:build-release-binary --target aarch64-unknown-linux-musl
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-key: release-build

      - name: Rustup Adds Target
        run: rustup +nightly target add ${{ matrix.target }}

      - uses: goto-bus-stop/setup-zig@abea47f85e598557f500fa1fd2ab7464fcb39406 # v2.2.1
        if: ${{ contains(matrix.target, 'musl') }}
        with:
          version: 0.13.0

      - uses: taiki-e/install-action@ab3728c7ba6948b9b429627f4d55a68842b27f18 # v2.50.3
        if: ${{ contains(matrix.target, 'musl') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild

      # https://github.com/nodejs/node-gyp/issues/2869
      - name: Setup python
        run: pip install setuptools
        if: ${{ matrix.os == 'macos-latest' }}

      - name: Setup Node
        uses: ./.github/actions/setup-node

      - name: Build Binding
        run: ${{ matrix.build }}
        shell: bash

      - name: Upload Binding Artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          if-no-files-found: error
          name: binary-${{ matrix.target }}
          path: |
            packages/ram/artifacts/ram${{ contains(matrix.target, 'windows') && '.exe' || '' }}

  build-node-packages:
    strategy:
      fail-fast: false
    name: Build Node Package
    runs-on: ubuntu-latest
    env:
      RELEASING: 'true'
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - name: Setup Node
        uses: ./.github/actions/setup-node

      - name: Build Node binding
        # This binary is only used to build the node package itself. It's won't be published.
        run: pnpm --filter npm build-binary

      - name: Determine Version
        if: ${{ inputs.version != 'noop' }}
        run: node --import @oxc-node/core/register ./scripts/misc/bump-version.js ${RAM_VERSION}
        env:
          RAM_VERSION: ${{ inputs.version }}

      - name: Build Node Packages
        # Binaries are built in the previous steps. Unlike in local development, we only need to build the node package itself.
        run: pnpm --filter @ramlang/cli build

      - name: Upload Node Artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          if-no-files-found: error
          name: node-artifact
          path: |
            packages/ram/dist/**

      - name: Upload `ram-version.txt`
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          if-no-files-found: warn
          name: ram-version
          path: |
            ram-version.txt

